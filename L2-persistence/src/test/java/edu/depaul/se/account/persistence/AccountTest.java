package edu.depaul.se.account.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Test account persistence
 */
public class AccountTest {

    private static EntityManagerFactory entityManagerFactory;

    private EntityManager entityManager;

    /**
     * Setup data for the test
     * @throws java.sql.SQLException
     */
    @BeforeEach
    public void beforeClass() throws SQLException {
        entityManagerFactory = Persistence.createEntityManagerFactory("jpa-inMemoryDemoPU");
        String connectionUrl = "jdbc:hsqldb:mem:SE452";
        String userName = "";
        String password = "";

        try (Connection con = DriverManager.getConnection(connectionUrl, userName, password)) {
            // Step 3:  Create a statement where the SQL statement will be provided
            Statement stmt = con.createStatement();
            
            stmt.executeUpdate("drop table ACCOUNTS");
            
            stmt.executeUpdate("create table ACCOUNTS (ID integer GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY, NM VARCHAR(50), Balance float)");
            stmt.executeUpdate("insert into accounts(id, nm, balance) values (200, 'Baker', 11.11)");
            stmt.executeUpdate("insert into accounts(id, nm, balance) values (201, 'Charley', 22.22)");
            stmt.executeUpdate("insert into accounts(id, nm, balance) values (202, 'Delta', 33.33)");
        }
    }

    @BeforeEach
    public void beforeEachTest() {
        entityManager = entityManagerFactory.createEntityManager();
    }

    @AfterEach
    public void afterEachTest() {
        entityManager.close();
    }

    @Test
    public void testInsert() {
        entityManager.getTransaction().begin();
        Account account = new Account();
        account.setBalance(100);
        long newAccount = (long) new Random().nextInt();
        account.setId(newAccount);
        account.setName("Abe");

        // Persist the customer
        entityManager.persist(account);

        entityManager.getTransaction().commit();

        Account verification = findAccount(newAccount);
        assertAll("account values",
                () -> assertEquals(verification.getName(), account.getName()),
                () -> assertEquals(verification.getBalance(), account.getBalance())
        );
    }
    
    @Test
    public void countAccount() {
        Query q = entityManager.createQuery("select c from Account c");
        assertEquals(3, q.getResultList().size());
    }
    
    private Account findAccount(long accountId) {
        Query q = entityManager.createQuery("select c from Account c where c.id = :id");
        q.setParameter("id", accountId);
        return (Account) q.getSingleResult();
    }

}
